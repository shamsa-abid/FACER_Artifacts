Evaluation ID:80
Application Category:bluetooth
Your Method's Feature Description: update list of paired Bluetooth devices
-------------------------------------------------------
Your Method's Body: 
	private void updateDeviceList() {
		Set<BluetoothDevice> pairedDevices = bluetoothAdapter.getBondedDevices();

		if (pairedDevices.size() > 0) {
			findViewById(R.id.page_devicelist_title_yipeiduitextview).setVisibility(View.VISIBLE);
			for (BluetoothDevice device : pairedDevices) {
				pairedDevicesArrayAdapter.add(new NameAndAddress(device.getName(), device.getAddress()));
			}
		} else {
			String noDevices = getResources().getText(R.string.none_paired).toString();
			pairedDevicesArrayAdapter.add(new NameAndAddress(noDevices, null));
		}
	}
-------------------------------------------------------
Your Method's API calls:
BluetoothAdapter.getBondedDevices
Set<BluetoothDevice>.size
ArrayAdapter.add
BluetoothDevice.getName
BluetoothDevice.getAddress
======================================
Related Methods:
======================================
-------------------------------------------------------
Recommendation No. 1
-------------------------------------------------------
    /**
     * Indicate that the connection attempt failed and notify the UI Activity.
     */
    private void connectionFailed() {
        // Send a failure message back to the Activity
        Message msg = mHandler.obtainMessage(LanylActivity.MESSAGE_TOAST);
        Bundle bundle = new Bundle();
        bundle.putString(LanylActivity.TOAST, "????????");
        msg.setData(bundle);
        mHandler.sendMessage(msg);

        // Start the service over to restart listening mode
        LanylService.this.start();
    }
-------------------------------------------------------
Method API calls:
Handler.obtainMessage
Bundle.new
Bundle.putString
Message.setData
Handler.sendMessage
-------------------------------------------------------
Recommendation No. 2
-------------------------------------------------------
		@Override
		public void onReceive(Context context, Intent intent) {
			String action = intent.getAction();

			if (BluetoothDevice.ACTION_FOUND.equals(action)) {
				BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
				if (device.getBondState() != BluetoothDevice.BOND_BONDED) {
					NameAndAddress naa = new NameAndAddress(device.getName(), device.getAddress());
					if(!foundDevice.contains(naa)) {
						newDevicesArrayAdapter.add(naa);
						foundDevice.add(naa);
					}
				}
			} else if (BluetoothAdapter.ACTION_DISCOVERY_FINISHED.equals(action)) {
				searchNewProgress.setVisibility(View.INVISIBLE);
				searchNewButton.setEnabled(true);
				
				if (newDevicesArrayAdapter.getCount() == 0) {
					String noDevices = getResources().getText(R.string.none_found).toString();
					newDevicesArrayAdapter.add(new NameAndAddress(noDevices, null));
				}
			}
		}
-------------------------------------------------------
Method API calls:
BluetoothDevice.ACTION_FOUND.equals
BluetoothDevice.getBondState
BluetoothDevice.getName
BluetoothDevice.getAddress
List<NameAndAddress>.contains
ArrayAdapter.add
List<NameAndAddress>.add
BluetoothAdapter.ACTION_DISCOVERY_FINISHED.equals
ProgressBar.setVisibility
ImageButton.setEnabled
ArrayAdapter.getCount
-------------------------------------------------------
Recommendation No. 3
-------------------------------------------------------
        public void run() {
            Log.i(TAG, "BEGIN mConnectThread SocketType:" + mSocketType);
            setName("ConnectThread" + mSocketType);

            // Always cancel discovery because it will slow down a connection
            mAdapter.cancelDiscovery();

            // Make a connection to the BluetoothSocket
            try {
                // This is a blocking call and will only return on a
                // successful connection or an exception
                mmSocket.connect();
            } catch (IOException e) {
                // Close the socket
                try {
                    mmSocket.close();
                } catch (IOException e2) {
                    Log.e(TAG, "unable to close() " + mSocketType +
                            " socket during connection failure", e2);
                }
                connectionFailed();
                return;
            }

            // Reset the ConnectThread because we're done
            synchronized (LanylService.this) {
                mConnectThread = null;
            }

            // Start the connected thread
            connected(mmSocket, mmDevice, mSocketType);
        }
-------------------------------------------------------
Method API calls:
BluetoothAdapter.cancelDiscovery
BluetoothSocket.connect
BluetoothSocket.close
-------------------------------------------------------
Recommendation No. 4
-------------------------------------------------------
    private void initializeValues() {
        pairedDevicesArrayAdapter = new ArrayAdapter<String>(this,
                R.layout.device_name);
        newDevicesArrayAdapter = new ArrayAdapter<String>(this,
                R.layout.device_name);

        lvDeviceListPairedDevice.setAdapter(pairedDevicesArrayAdapter);
        lvDeviceListNewDevice.setAdapter(newDevicesArrayAdapter);

        // Register for broadcasts when a device is discovered
        IntentFilter filter = new IntentFilter(BluetoothDevice.ACTION_FOUND);
        registerReceiver(discoveryFinishReceiver, filter);

        // Register for broadcasts when discovery has finished
        filter = new IntentFilter(BluetoothAdapter.ACTION_DISCOVERY_FINISHED);
        registerReceiver(discoveryFinishReceiver, filter);

        bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
        Set<BluetoothDevice> pairedDevices = bluetoothAdapter
                .getBondedDevices();

        // If there are paired devices, add each one to the ArrayAdapter
        if (pairedDevices.size() > 0) {
            tvDeviceListPairedDeviceTitle.setVisibility(View.VISIBLE);
            for (BluetoothDevice device : pairedDevices) {
                pairedDevicesArrayAdapter.add(device.getName() + "\n"
                        + device.getAddress());
            }
        } else {
            String noDevices = getResources().getText(R.string.none_paired)
                    .toString();
            pairedDevicesArrayAdapter.add(noDevices);
        }
    }
-------------------------------------------------------
Method API calls:
ArrayAdapter<String>.new
ListView.setAdapter
IntentFilter.new
BluetoothAdapter.getDefaultAdapter
BluetoothAdapter.getBondedDevices
Set<BluetoothDevice>.size
TextView.setVisibility
ArrayAdapter.add
BluetoothDevice.getName
BluetoothDevice.getAddress
-------------------------------------------------------
Recommendation No. 5
-------------------------------------------------------
        public void onItemClick(AdapterView<?> av, View v, int arg2, long arg3) {
            // Cancel discovery because it's costly and we're about to connect
            mBtAdapter.cancelDiscovery();

            // Get the device MAC address, which is the last 17 chars in the View
            String info = ((TextView) v).getText().toString();
            String address = info.substring(info.length() - 17);

            // Create the result Intent and include the MAC address
            Intent intent = new Intent();
            intent.putExtra(EXTRA_DEVICE_ADDRESS, address);

            // Set result and finish this Activity
            setResult(Activity.RESULT_OK, intent);
            finish();
        }
-------------------------------------------------------
Method API calls:
BluetoothAdapter.cancelDiscovery
String.substring
String.length
BroadcastReceiver.new
