Evaluation ID:2971
Application Category:file
Your Method's Feature Description: put file to cache
-------------------------------------------------------
Your Method's Body: 
    /**
     * ?? String?? ? ???
     *
     * @param key
     *            ???key
     * @param value
     *            ???String??
     */
    public void put(String key, String value) {
        File file = mCache.newFile(key);
        BufferedWriter out = null;
        try {
            out = new BufferedWriter(new FileWriter(file), 1024);
            out.write(value);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (out != null) {
                try {
                    out.flush();
                    out.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            mCache.put(file);
        }
    }
-------------------------------------------------------
Your Method's API calls:
BufferedWriter.new
FileWriter.new
BufferedWriter.write
IOException.printStackTrace
BufferedWriter.flush
BufferedWriter.close
======================================
Related Methods:
======================================
-------------------------------------------------------
Recommendation No. 1
-------------------------------------------------------
    private ACache(File cacheDir, long max_size, int max_count) {
        if (!cacheDir.exists() && !cacheDir.mkdirs()) {
            throw new RuntimeException("can't make dirs in "
                    + cacheDir.getAbsolutePath());
        }
        mCache = new ACacheManager(cacheDir, max_size, max_count);
    }
-------------------------------------------------------
Method API calls:
File.exists
File.mkdirs
RuntimeException.new
File.getAbsolutePath
-------------------------------------------------------
Recommendation No. 2
-------------------------------------------------------
    public static ACache get(File cacheDir, long max_zise, int max_count) {
        ACache manager = mInstanceMap.get(cacheDir.getAbsoluteFile() + myPid());
        if (manager == null) {
            manager = new ACache(cacheDir, max_zise, max_count);
            mInstanceMap.put(cacheDir.getAbsolutePath() + myPid(), manager);
        }
        return manager;
    }
-------------------------------------------------------
Method API calls:
Map<String,ACache>.get
File.getAbsoluteFile
Map<String,ACache>.put
File.getAbsolutePath
-------------------------------------------------------
Recommendation No. 3
-------------------------------------------------------
    /**
     * ?? String??
     *
     * @param key
     * @return String ??
     */
    public String getAsString(String key) {
        File file = mCache.get(key);
        if (!file.exists())
            return null;
        boolean removeFile = false;
        BufferedReader in = null;
        try {
            in = new BufferedReader(new FileReader(file));
            String readString = "";
            String currentLine;
            while ((currentLine = in.readLine()) != null) {
                readString += currentLine;
            }
            if (!Utils.isDue(readString)) {
                return Utils.clearDateInfo(readString);
            } else {
                removeFile = true;
                return null;
            }
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (removeFile)
                remove(key);
        }
    }
-------------------------------------------------------
Method API calls:
File.exists
BufferedReader.new
FileReader.new
BufferedReader.readLine
IOException.printStackTrace
BufferedReader.close
-------------------------------------------------------
Recommendation No. 4
-------------------------------------------------------
    /**
     * ?? byte?? ? ???
     *
     * @param key
     *            ???key
     * @param value
     *            ?????
     */
    public void put(String key, byte[] value) {
        File file = mCache.newFile(key);
        FileOutputStream out = null;
        try {
            out = new FileOutputStream(file);
            out.write(value);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (out != null) {
                try {
                    out.flush();
                    out.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            mCache.put(file);
        }
    }
-------------------------------------------------------
Method API calls:
FileOutputStream.new
FileOutputStream.write
Exception.printStackTrace
FileOutputStream.flush
FileOutputStream.close
IOException.printStackTrace
-------------------------------------------------------
Recommendation No. 5
-------------------------------------------------------
    /**
     * ?? byte ??
     *
     * @param key
     * @return byte ??
     */
    public byte[] getAsBinary(String key) {
        RandomAccessFile RAFile = null;
        boolean removeFile = false;
        try {
            File file = mCache.get(key);
            if (!file.exists())
                return null;
            RAFile = new RandomAccessFile(file, "r");
            byte[] byteArray = new byte[(int) RAFile.length()];
            RAFile.read(byteArray);
            if (!Utils.isDue(byteArray)) {
                return Utils.clearDateInfo(byteArray);
            } else {
                removeFile = true;
                return null;
            }
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        } finally {
            if (RAFile != null) {
                try {
                    RAFile.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (removeFile)
                remove(key);
        }
    }
-------------------------------------------------------
Method API calls:
File.exists
RandomAccessFile.new
RandomAccessFile.length
RandomAccessFile.read
Exception.printStackTrace
RandomAccessFile.close
IOException.printStackTrace
