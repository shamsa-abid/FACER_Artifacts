Evaluation ID:31838
Application Category:weather
Your Method's Feature Description: Check and add permissions for location access
-------------------------------------------------------
Your Method's Body: 
    public boolean checkPermissionsSettingsAndShowAlert() {
        if (permissionsAndSettingsRequested) {
            return true;
        }
        permissionsAndSettingsRequested = true;
        Location autoUpdateLocation = locationsDbHelper.getLocationByOrderId(0);
        if (!autoUpdateLocation.isEnabled()) {
            return true;
        }
        AlertDialog.Builder settingsAlert = new AlertDialog.Builder(MainActivity.this);
        settingsAlert.setTitle(R.string.alertDialog_location_permission_title);

        LocationManager locationManager = (LocationManager) getBaseContext().getSystemService(Context.LOCATION_SERVICE);
        boolean isGPSEnabled = locationManager.getAllProviders().contains(LocationManager.GPS_PROVIDER)
                && locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER);
        boolean isNetworkEnabled = locationManager.getAllProviders().contains(LocationManager.NETWORK_PROVIDER)
                && locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER);
        String geocoder = AppPreference.getLocationGeocoderSource(getBaseContext());

        boolean gpsNotEnabled = !isGPSEnabled && AppPreference.isGpsEnabledByPreferences(getBaseContext());
        boolean networkNotEnabled = !isNetworkEnabled && "location_geocoder_system".equals(geocoder);

        if (gpsNotEnabled || networkNotEnabled) {
            settingsAlert.setMessage(R.string.alertDialog_location_permission_message_location_phone_settings);
            settingsAlert.setPositiveButton(R.string.alertDialog_location_permission_positiveButton_settings,
                    new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            permissionsAndSettingsRequested = false;
                            Intent goToSettings = new Intent(
                                    Settings.ACTION_LOCATION_SOURCE_SETTINGS);
                            startActivity(goToSettings);
                        }
                    });
        } else {
            List<String> permissions = new ArrayList<>();
            StringBuilder notificationMessage = new StringBuilder();
            if (AppPreference.isGpsEnabledByPreferences(getBaseContext()) &&
                    isGPSEnabled &&
                    ContextCompat.checkSelfPermission(getBaseContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
                notificationMessage.append(getString(R.string.alertDialog_location_permission_message_location_phone_settings) + "\n\n");
                permissions.add(Manifest.permission.ACCESS_FINE_LOCATION);
            }
            if ("location_geocoder_local".equals(geocoder) && ContextCompat.checkSelfPermission(getBaseContext(), Manifest.permission.READ_PHONE_STATE) != PackageManager.PERMISSION_GRANTED) {
                notificationMessage.append(getString(R.string.alertDialog_location_permission_message_location_phone_permission));
                permissions.add(Manifest.permission.READ_PHONE_STATE);
            } else if (isNetworkEnabled && "location_geocoder_system".equals(geocoder) && ContextCompat.checkSelfPermission(getBaseContext(), Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
                notificationMessage.append(getString(R.string.alertDialog_location_permission_message_location_network_permission));
                permissions.add(Manifest.permission.ACCESS_COARSE_LOCATION);
            }
            if (permissions.isEmpty()) {
                return true;
            }
            settingsAlert.setMessage(notificationMessage.toString());
            final String[] permissionsArray = permissions.toArray(new String[permissions.size()]);
            final Activity mainActivity = this;
            settingsAlert.setPositiveButton(R.string.alertDialog_location_permission_positiveButton_permissions,
                    new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            ActivityCompat.requestPermissions(mainActivity,
                                    permissionsArray,
                                    123);
                        }
                    });
        }

        settingsAlert.setNegativeButton(R.string.alertDialog_location_permission_negativeButton,
                new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        permissionsAndSettingsRequested = false;
                        dialog.cancel();
                    }
                });
        settingsAlert.show();
        return false;
    }
-------------------------------------------------------
Your Method's API calls:
Builder.setTitle
LocationManager.getAllProviders
LocationManager.isProviderEnabled
Builder.setMessage
Builder.setPositiveButton
ArrayList<>.new
StringBuilder.new
ContextCompat.checkSelfPermission
StringBuilder.append
List<String>.add
List<String>.isEmpty
StringBuilder.toString
List<String>.toArray
List<String>.size
ActivityCompat.requestPermissions
Builder.setNegativeButton
DialogInterface.cancel
Builder.show
======================================
Related Methods:
======================================
-------------------------------------------------------
Recommendation No. 1
-------------------------------------------------------
    @Override
    public IBinder onBind(Intent intent) {
        return messenger.getBinder();
    }
-------------------------------------------------------
Method API calls:
Messenger.getBinder
Handler.new
Runnable.new
-------------------------------------------------------
Recommendation No. 2
-------------------------------------------------------
                @Override
                public boolean onNavigationItemSelected(@NonNull MenuItem item) {
                    switch (item.getItemId()) {
                        case R.id.nav_menu_current_weather:
                            startActivity(new Intent(BaseActivity.this, MainActivity.class));
                            break;
                        case R.id.nav_menu_graphs:
                            createBackStack(new Intent(BaseActivity.this,
                                                       GraphsActivity.class));
                            break;
                        case R.id.nav_menu_weather_forecast:
                            createBackStack(new Intent(BaseActivity.this,
                                                       WeatherForecastActivity.class));
                            break;
                        case R.id.nav_settings:
                            createBackStack(new Intent(BaseActivity.this,
                                                       SettingsActivity.class));
                            break;
                        case R.id.nav_menu_help:
                            createBackStack(new Intent(BaseActivity.this,
                                    HelpActivity.class));
                            break;
                        case R.id.nav_feedback:
                            Intent sendMessage = new Intent(Intent.ACTION_SEND);
                            sendMessage.setType("message/rfc822");
                            sendMessage.putExtra(Intent.EXTRA_EMAIL, new String[]{
                                    getResources().getString(R.string.feedback_email)});
                            try {
                                startActivity(Intent.createChooser(sendMessage, "Send feedback"));
                            } catch (android.content.ActivityNotFoundException e) {
                                Toast.makeText(BaseActivity.this, "Communication app not found",
                                               Toast.LENGTH_SHORT).show();
                            }
                            break;
                    }

                    mDrawerLayout.closeDrawer(GravityCompat.START);
                    return true;
                }
-------------------------------------------------------
Method API calls:
MenuItem.getItemId
DrawerLayout.closeDrawer
-------------------------------------------------------
Recommendation No. 3
-------------------------------------------------------
    public boolean isNetworkAvailableAndConnected() {
        ConnectivityManager connectivityManager
                = (ConnectivityManager) mContext.getSystemService(Context.CONNECTIVITY_SERVICE);

        NetworkInfo networkInfo = connectivityManager.getActiveNetworkInfo();
        return networkInfo != null && networkInfo.isConnected();
    }
-------------------------------------------------------
Method API calls:
Context.getSystemService
ConnectivityManager.getActiveNetworkInfo
NetworkInfo.isConnected
HashMap<>.new
-------------------------------------------------------
Recommendation No. 4
-------------------------------------------------------
    public static Bitmap createWeatherIconWithColor(Context context, String text, int iconColor) {
        Bitmap bitmap = Bitmap.createBitmap(256, 256, Bitmap.Config.ARGB_4444);
        Canvas canvas = new Canvas(bitmap);
        Paint paint = new Paint();
        Typeface weatherFont = Typeface.createFromAsset(context.getAssets(),
                                                        "fonts/weathericons-regular-webfont.ttf");

        paint.setAntiAlias(true);
        paint.setSubpixelText(true);
        paint.setTypeface(weatherFont);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(iconColor);
        paint.setTextSize(180);
        paint.setTextAlign(Paint.Align.CENTER);
        canvas.drawText(text, 128, 200, paint);
        return bitmap;
    }
-------------------------------------------------------
Method API calls:
Bitmap.createBitmap
Canvas.new
Paint.new
Typeface.createFromAsset
Context.getAssets
Paint.setAntiAlias
Paint.setSubpixelText
Paint.setTypeface
Paint.setStyle
Paint.setColor
Paint.setTextSize
Paint.setTextAlign
Canvas.drawText
-------------------------------------------------------
Recommendation No. 5
-------------------------------------------------------
    private void createWidgetActionSettingsDialog(final int widgetId, final ArrayList<String> widgetActionPlaces) {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        LayoutInflater inflater = getLayoutInflater();
        View forecastSettingView = inflater.inflate(R.layout.widget_setting_actions, null);

        final WidgetSettingsDbHelper widgetSettingsDbHelper = WidgetSettingsDbHelper.getInstance(this);

        final ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this,
                R.array.widget_actions, android.R.layout.simple_spinner_item);

        Spinner cityActions = forecastSettingView.findViewById(R.id.widget_setting_actions_city);
        TextView cityActionLabel = forecastSettingView.findViewById(R.id.widget_setting_actions_city_label);
        final WidgetActionListener cityActionsListener;
        if (widgetActionPlaces.contains("action_city")) {
            cityActions.setVisibility(View.VISIBLE);
            cityActionLabel.setVisibility(View.VISIBLE);
            WidgetActions cityAction = WidgetActions.getById(widgetSettingsDbHelper.getParamLong(widgetId, "action_city"), "action_city");
            cityActions.setAdapter(adapter);
            cityActions.setSelection(cityAction.getComboSelection());
            cityActionsListener = new WidgetActionListener(cityAction);
            cityActions.setOnItemSelectedListener(cityActionsListener);
        } else {
            cityActions.setVisibility(View.GONE);
            cityActionLabel.setVisibility(View.GONE);
            cityActionsListener = null;
        }

        Spinner mainIconActions = forecastSettingView.findViewById(R.id.widget_setting_actions_main_icon);
        TextView mainIconActionsLabel = forecastSettingView.findViewById(R.id.widget_setting_actions_main_icon_label);
        final WidgetActionListener mainIconActionsListener;
        if (widgetActionPlaces.contains("action_current_weather_icon")) {
            mainIconActions.setVisibility(View.VISIBLE);
            mainIconActionsLabel.setVisibility(View.VISIBLE);
            WidgetActions mainIconAction = WidgetActions.getById(widgetSettingsDbHelper.getParamLong(widgetId, "action_current_weather_icon"), "action_current_weather_icon");
            mainIconActions.setAdapter(adapter);
            mainIconActions.setSelection(mainIconAction.getComboSelection());
            mainIconActionsListener = new WidgetActionListener(mainIconAction);
            mainIconActions.setOnItemSelectedListener(mainIconActionsListener);
        } else {
            mainIconActions.setVisibility(View.GONE);
            mainIconActionsLabel.setVisibility(View.GONE);
            mainIconActionsListener = null;
        }

        Spinner forecastActions = forecastSettingView.findViewById(R.id.widget_setting_actions_forecast);
        TextView forecastActionsLabel = forecastSettingView.findViewById(R.id.widget_setting_actions_forecast_label);
        final WidgetActionListener forecastActionsListener;
        if (widgetActionPlaces.contains("action_forecast")) {
            forecastActions.setVisibility(View.VISIBLE);
            forecastActionsLabel.setVisibility(View.VISIBLE);
            WidgetActions forecastAction = WidgetActions.getById(widgetSettingsDbHelper.getParamLong(widgetId, "action_forecast"), "action_forecast");
            forecastActions.setAdapter(adapter);
            forecastActions.setSelection(forecastAction.getComboSelection());
            forecastActionsListener = new WidgetActionListener(forecastAction);
            forecastActions.setOnItemSelectedListener(forecastActionsListener);
        } else {
            forecastActions.setVisibility(View.GONE);
            forecastActionsLabel.setVisibility(View.GONE);
            forecastActionsListener = null;
        }

        Spinner graphActions = forecastSettingView.findViewById(R.id.widget_setting_actions_graph);
        TextView graphActionsLabel = forecastSettingView.findViewById(R.id.widget_setting_actions_graph_label);
        final WidgetActionListener graphActionsListener;
        if (widgetActionPlaces.contains("action_graph")) {
            graphActions.setVisibility(View.VISIBLE);
            graphActionsLabel.setVisibility(View.VISIBLE);
            WidgetActions graphAction = WidgetActions.getById(widgetSettingsDbHelper.getParamLong(widgetId, "action_graph"), "action_graph");
            graphActions.setAdapter(adapter);
            graphActions.setSelection(graphAction.getComboSelection());
            graphActionsListener = new WidgetActionListener(graphAction);
            graphActions.setOnItemSelectedListener(graphActionsListener);
        } else {
            graphActions.setVisibility(View.GONE);
            graphActionsLabel.setVisibility(View.GONE);
            graphActionsListener = null;
        }

        builder.setView(forecastSettingView)
                .setPositiveButton(R.string.ok, new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int id) {
                        if (cityActionsListener != null) {
                            widgetSettingsDbHelper.saveParamLong(
                                    widgetId,
                                    "action_city",
                                    cityActionsListener.getWidgetAction().getId());
                        }
                        if (mainIconActionsListener != null) {
                            widgetSettingsDbHelper.saveParamLong(
                                    widgetId,
                                    "action_current_weather_icon",
                                    mainIconActionsListener.getWidgetAction().getId());
                        }
                        if (forecastActionsListener != null) {
                            widgetSettingsDbHelper.saveParamLong(
                                    widgetId,
                                    "action_forecast",
                                    forecastActionsListener.getWidgetAction().getId());
                        }
                        if (graphActionsListener != null) {
                            widgetSettingsDbHelper.saveParamLong(
                                    widgetId,
                                    "action_graph",
                                    graphActionsListener.getWidgetAction().getId());
                        }
                        Intent intent = new Intent(Constants.ACTION_APPWIDGET_CHANGE_SETTINGS);
                        intent.setPackage("org.thosp.yourlocalweather");
                        intent.putExtra("widgetId", widgetId);
                        sendBroadcast(intent);
                        finish();
                    }
                })
                .setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int id) {
                        finish();
                    }
                });
        AlertDialog dialog = builder.create();
        dialog.show();
    }
-------------------------------------------------------
Method API calls:
LayoutInflater.inflate
ArrayAdapter.createFromResource
View.findViewById
ArrayList<String>.contains
Spinner.setVisibility
TextView.setVisibility
WidgetActions.getById
Spinner.setAdapter
Spinner.setSelection
WidgetActions.getComboSelection
Spinner.setOnItemSelectedListener
Builder.setView
Builder.create
AlertDialog.show
